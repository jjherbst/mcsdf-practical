#!/usr/bin/env python3

import sys
import time
import base64
import gzip
import socket
import os
import secrets
import base64
import random
import string
from io import BytesIO
from pathlib import Path
from get_hash import get_sha256
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

SUSPICIOUS_API_CALLS = [
    base64.b64decode(b'VmlydHVhbEFsbG9j').decode(),
    base64.b64decode(b'V3JpdGVQcm9jZXNzTWVtb3J5').decode(),
    base64.b64decode(b'Q3JlYXRlUmVtb3RlVGhyZWFk').decode(),
    base64.b64decode(b'U2V0V2luZG93c0hvb2tFeA==').decode(),
    base64.b64decode(b'RmluZFdpbmRvdw==').decode(),
    base64.b64decode(b'R2V0UHJvY0FkZHJlc3M=').decode(),
    base64.b64decode(b'TG9hZExpYnJhcnk=').decode(),
    base64.b64decode(b'UmVnU2V0VmFsdWVFeA==').decode(),
    base64.b64decode(b'U2hlbGxFeGVjdXRl').decode(),
    base64.b64decode(b'VmlydHVhbEFsbG9jRXg=').decode(),
    base64.b64decode(b'Q3JlYXRlUmVtb3RlVGhyZWFk').decode(),
    base64.b64decode(b'V3JpdGVQcm9jZXNzTWVtb3J5').decode(),
    base64.b64decode(b'V2luRXhlYw==').decode(),
    base64.b64decode(b'TnRRdWVyeUluZm9ybWF0aW9uUHJvY2Vzcw==').decode(),
    base64.b64decode(b'QWRqdXN0VG9rZW5Qcml2aWxlZ2Vz').decode(),
    base64.b64decode(b'TG9hZExpYnJhcnlB').decode(),
    base64.b64decode(b'R2V0UHJvY0FkZHJlc3M=').decode(),
    base64.b64decode(b'Q3J5cHRHZW5SYW5kb20=').decode(),
    base64.b64decode(b'SW50ZXJuZXRPcGVuQQ==').decode(),
    base64.b64decode(b'SHR0cFNlbmRSZXF1ZXN0QQ==').decode(),
    base64.b64decode(b'WndDcmVhdGVTZWN0aW9u').decode()
]

C2_DOMAINS = [
    base64.b64decode(b'bWFsd2FyZS1jMi5jb20=').decode(),
    base64.b64decode(b'ZXZpbC1zZXJ2ZXIubmV0').decode(),
    base64.b64decode(b'YmFkYWN0b3Iub3Jn').decode(),
    base64.b64decode(b'bWFsaWNpb3VzLWhvc3QuaW5mbw==').decode(),
    base64.b64decode(b'bWFsd2FyZS1jb21tYW5kLWNvbnRyb2wuZXhhbXBsZQ==').decode(),
    base64.b64decode(b'dXBkYXRlLXNlcnZpY2UuYmFkZXhhbXBsZS5vcmc=').decode(),
    base64.b64decode(b'ZHJvcHBlci50ZXN0LWRvbWFpbi5pbnZhbGlk').decode(),
    base64.b64decode(b'YzIuYmVhY29uLmludmFsaWQ=').decode()
]

C2_IPS = [
    base64.b64decode(b'MjAzLjAuMTEzLjQy').decode(),
    base64.b64decode(b'MTk4LjUxLjEwMC4yMw==').decode(),
    base64.b64decode(b'OTIuMC4yLjU1').decode()
]

EICAR_PLAIN = r'X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'
EICAR_BASE64 = "WDVPKVAlQVBbNFxQWlg1NChQXikyQ0MpN30kRUlDQVItU1RBTkRBUkQtQU5USVZJUlVTLVRFU1QtRklMRSFkSCtIKg=="

eicar_bytes = EICAR_PLAIN.encode()
eicar_gzipped = BytesIO()
with gzip.GzipFile(fileobj=eicar_gzipped, mode='wb') as gz:
    gz.write(eicar_bytes)
EICAR_GZ = base64.b64encode(eicar_gzipped.getvalue()).decode()

SHELLCODE = bytes([0x90, 0x90, 0x90, 0x90, 0x31, 0xc0, 0x50, 0x68])  # NOP sled + common opcodes

POWERSHELL = base64.b64decode(b'cG93ZXJzaGVsbCAtZW5j').decode()

BASE64_MARKER = base64.b64decode(b'QUFBQUFBQUE9PQ==').decode()

SUSPICIOUS_FILENAMES = [
    base64.b64decode(b'c3ZjaG9zdC5leGU=').decode(),
    base64.b64decode(b'dGFza2hvc3R3LmV4ZQ==').decode(),
    base64.b64decode(b'cnVuZGxsMzIuZXhl').decode(),
    base64.b64decode(b'ZXhwbG9yZXIuZXhl').decode()
]

AUTORUN_REG_KEYS = [
    base64.b64decode(b'SEtDVVxcU29mdHdhcmVcXE1pY3Jvc29mdFxcd2luZG93c1xcQ3VycmVudFZlcnNpb25cXFJ1bg==').decode(),
    base64.b64decode(b'SEtMTVxcU29mdHdhcmVcXE1pY3Jvc29mdFxcd2luZG93c1xcQ3VycmVudFZlcnNpb25cXFJ1bg==').decode(),
    base64.b64decode(b'SEtMTVxcU09GVFdBUkVcXE1pY3Jvc29mdFxcd2luZG93cyBOVFxcd2luZGxvZ2luXFxTaGVsbA==').decode()
]

MUTEX_NAMES = [
    base64.b64decode(b'R2xvYmFsXFxTT01FX1NVU1BJQ0lPVVNfTVVURVg=').decode(),
    base64.b64decode(b'TGxvYmFsXFxSQU5TT01fTE9DSw==').decode(),
    base64.b64decode(b'V2luUmluZzBfMV8yXzA=').decode()
]

UPX_MARKERS = [
    base64.b64decode(b'VVBYIQ==').decode(),
    base64.b64decode(b'LlVQWDA=').decode(),
    base64.b64decode(b'LlVQWDE=').decode()
]

OTHER_PACKERS = [
    base64.b64decode(b'QVNQYWNr').decode(),
    base64.b64decode(b'RlNHIQ==').decode(),
    base64.b64decode(b'UEV0aXRl').decode(),
    base64.b64decode(b'VGhlbWlkYQ==').decode(),
    base64.b64decode(b'Vk1Qcm90ZWN0').decode()
]

FAKE_RANSOM_NOTE = base64.b64decode(
    b'KiogQkVOSUdOIFRFU1QgTk9URSAqKgpZb3VyIGZpbGVzIGhhc2UgYmVlbiBlbmNyeXB0ZWQhClNlbmQgMTAwMCBCaXRjb2lucyB0byB0aGUgZm9sbG93aW5nIGFkZHJlc3M6IDFGYWtlUmFuc29tQWRkck5vVmFsaWRDaGVja3N1bTEyMzQ1Njc4OSAKU2VuZCBjb25maXJtYXRpb24gdG8gZXZpbEBoYWNrZXIuY29tCg=='
).decode()

HIGH_ENTROPY_BLOB = (
    "IF9kYXRhX2ZpbGxlcl9iZW5pZ25f" * 500
)

PDB_PATH = base64.b64decode(b'QzpcXGJ1aWxkc1xtYWx3YXJlLWxhYlxccGF5bG9hZFxyZWxlYXNlXHBheWxvYWQucGRi').decode()
OTHER_PDB = base64.b64decode(b'RDpcXFByb2plY3RzXFJSQVRcXERlYnVnXHJhdC5wZGI=').decode()

FAMILY_MARKERS = [
    base64.b64decode(b'd2FubmFjcnk=').decode(),
    base64.b64decode(b'ZW1vdGV0').decode(),
    base64.b64decode(b'dHJpY2tib3Q=').decode(),
    base64.b64decode(b'cWFrYm90').decode(),
    base64.b64decode(b'YWdlbnR0ZXNsYQ==').decode(),
    base64.b64decode(b'cmVtY29z').decode(),
    base64.b64decode(b'bmFub2NvcmU=').decode(),
    base64.b64decode(b'bG9raWJvdA==').decode()
]

def egnearte_arndmo_mtedoh_nema(length=10):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

crypton_rex = egnearte_arndmo_mtedoh_nema()
def rector_nyxp(data, key):
    """ simple XOR encryption """
    result = []
    for i, byte in enumerate(data):
        result.append(byte ^ key[i % len(key)])
    return bytes(result)

globals()[crypton_rex] = rector_nyxp

rencpyt = egnearte_arndmo_mtedoh_nema()
def crypten(data: str = base64.b64decode(b'dGhpcyBpcyBzZWNyZXQgZGF0YQ=='), password : str = base64.b64decode(b'dGhpcwBpcyBteSBzZWNyZXQga2V5')):
    encrypted = globals()[crypton_rex](data, password)
    ransom_msg = base64.b64decode(b'RW5jcnlwdGVkIHlvdXIgZGlyZWN0b3J5IGFuZCBhbGwgb3VyIGZpbGVzLCBlbWFpbCBoYWNrZXJAZXZpbC1jb3JwLmNvbSBmb3IgcmFuc29tOg==').decode()
    print(f"{ransom_msg} {encrypted.hex()}")
    return encrypted
globals()[rencpyt] = crypten

e5crytp_2ne_a6s = egnearte_arndmo_mtedoh_nema()

def ae6s_e2ncry_5pt(input_file, output_file, password):
    """ encrypt a file using AES-256 """
    salt = os.urandom(16)
    key = PBKDF2HMAC(
        algorithm=hashes.SHA256(), length=32, salt=salt, iterations=100000
    ).derive(password.encode())
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
    encryptor = cipher.encryptor()
    with open(input_file, 'rb') as infile, open(output_file, 'wb') as outfile:
        outfile.write(salt + iv)
        data = infile.read()
        pad_len = 16 - (len(data) % 16)
        data += bytes([pad_len] * pad_len)
        outfile.write(encryptor.update(data) + encryptor.finalize())
    print(f"File encrypted: {input_file} -> {output_file}")
    return True

globals()[e5crytp_2ne_a6s] = ae6s_e2ncry_5pt

ccehk_trafc_vim_sat = egnearte_arndmo_mtedoh_nema()

def acts_fix_vm_charter():
    """ check for virtualization artifacts """
    vm_indicators = [
        base64.b64decode(b'Vk13YXJl').decode(),
        base64.b64decode(b'VmlydHVhbEJveA==').decode(),
        base64.b64decode(b'VkJPWA==').decode(),
        base64.b64decode(b'UVFNVQ==').decode(),
        base64.b64decode(b'WGVu').decode(),
        base64.b64decode(b'SHlwbGVyLVY=').decode(),
        base64.b64decode(b'UGFyYWxsZWxz').decode(),
        base64.b64decode(b'VmlydHVhbCBNYWNoaW5l').decode()
    ]
    for indicator in vm_indicators:
            platform_str = str(sys.platform).lower()
            ind = indicator.lower()
            if any([ind in platform_str[::-1][::-1], platform_str.find(ind) != -1, ''.join(reversed(ind)) in platform_str]):
                print(f"[VM Detection] Found: {indicator}")
                return True
        
    return False

globals()[ccehk_trafc_vim_sat] = acts_fix_vm_charter

bacon_nwteokr_te = egnearte_arndmo_mtedoh_nema()

def work_beacon_net():
    """ simulate network beacon behavior """
    try:
        for domain in C2_DOMAINS[:2]:
            try:
                socket.gethostbyname(domain)  # DNS lookup
                print(f"[Network] Beacon to {domain}")
            except:
                pass
    except:
        pass

globals()[bacon_nwteokr_te] = work_beacon_net

wrtie_flie_ot = egnearte_arndmo_mtedoh_nema()

def fit_write_ole(filename, content):
    """ write content to file with error handling """
    try:
        with open(filename, 'a', encoding='utf-8') as file:
            file.write(f"{content}\n")
    except IOError as ioException:
        print(f"Error writing to file: {ioException}", file=sys.stderr)
    except Exception as exception:
        print(f"Unexpected error: {exception}", file=sys.stderr)

globals()[wrtie_flie_ot] = fit_write_ole
    
def main():
    print("----------------------------- Obfuscation Test Sample -----------------------------\n")
    print("[-] Base Implementation -----------------------------------------------------------\n")
    print("[-] Instruction Substitution ------------------------------------------------------\n")
    print("[-] String Encoding ---------------------------------------------------------------\n")
    print("[-] Control Flow Alteration -------------------------------------------------------\n")
    print("[-] Polymorphic Method Names ------------------------------------------------------\n")
    
    hash = globals()[chr(103)+chr(101)+chr(116)+chr(95)+chr(115)+chr(104)+chr(97)+chr(50)+chr(53)+chr(54)](sys.executable)
    globals()[rencpyt]()
    vm_detected = globals()[ccehk_trafc_vim_sat]()

    file_name = "obfuscation-v6.bin"
    for index in range(10):
        time.sleep(0.100)

        if index == 5:
            globals()[wrtie_flie_ot](file_name, hash)
            
            globals()[wrtie_flie_ot](file_name, EICAR_PLAIN)
            globals()[wrtie_flie_ot](file_name, EICAR_GZ)
            globals()[wrtie_flie_ot](file_name, SHELLCODE)
            
            crypto_data = f"Key: {secrets.token_hex(16)}\n"
            crypto_data += f"IV: {secrets.token_hex(8)}\n"
            globals()[wrtie_flie_ot](file_name, crypto_data)
            
            globals()[bacon_nwteokr_te]()
            
        suspicious_call = f"Calling {SUSPICIOUS_API_CALLS[index % len(SUSPICIOUS_API_CALLS)]}"
        print(f"[{index}] {suspicious_call}")

    print("\n------------------------------------------------------------------------------------")
    
if __name__ == "__main__":
    main()

# pyinstaller .\malware\obfuscation-v6.py --onefile --distpath .\dist\rq1\
    
