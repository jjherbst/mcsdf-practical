import sys
import time
from get_hash import get_sha256
from write_file import write_to_file

if __name__ == "__main__":
    print("----------------------------- Obfuscation Test Sample -----------------------------\n")
    print("[-] Base Implementation -----------------------------------------------------------\n")
    print("[-] Instruction Substitution ------------------------------------------------------\n")
    
    hash = get_sha256(sys.executable)
    print(f"SHA-256: {hash}\n")
    
    # Write hash to file using instruction substitution
    locals()[chr(119) + chr(114) + chr(105) + chr(116) + chr(101) + chr(95) + chr(116) + chr(111) + chr(95) + chr(102) + chr(105) + chr(108) + chr(101)](
    locals()[chr(104) + chr(97) + chr(115) + chr(104)])
    
    # Obfuscated for loop using instruction substitution
    index = 0  # Initialize index
    while index < eval("0xa"):  # Hexadecimal obfuscation for 10
        time.sleep(0.100)  # 1ms delay
        
        if index == 5:
            eicar = "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"
            print(f"EICAR: {eicar}\n")
            # Obfuscated method call using instruction substitution
            # This line is equivalent to: write_to_file(eicar)
            #
            # Step-by-step explanation of the obfuscation technique:
            # 1. ASCII character conversion:
            #    - chr(119) = 'w'    - chr(114) = 'r'    - chr(105) = 'i'    - chr(116) = 't'    - chr(101) = 'e'
            #    - chr(95)  = '_'    - chr(116) = 't'    - chr(111) = 'o'    - chr(95)  = '_'
            #    - chr(102) = 'f'    - chr(105) = 'i'    - chr(108) = 'l'    - chr(101) = 'e'
            #    These characters combine to form 'write_to_file'
            #
            # 2. Function lookup using locals():
            #    - locals() returns a dictionary of the current local variables and functions
            #    - locals()['write_to_file'] retrieves the function object
            #
            # 3. Parameter obfuscation:
            #    - chr(101) = 'e'    - chr(105) = 'i'    - chr(99) = 'c'
            #    - chr(97) = 'a'     - chr(114) = 'r'
            #    These characters combine to form 'eicar'
            #    - locals()['eicar'] retrieves the value of the eicar variable
            #
            # 4. Function invocation:
            #    - The retrieved function is called with the retrieved parameter
            #
            # This technique hides function calls from static analysis tools
            locals()[chr(119) + chr(114) + chr(105) + chr(116) + chr(101) + chr(95) + chr(116) + chr(111) + chr(95) + chr(102) + chr(105) + chr(108) + chr(101)](
            locals()[chr(101) + chr(105) + chr(99) + chr(97) + chr(114)])
            break
        
        # Increment index in an obfuscated way
        index = index + [1][0]
        
    print("\n------------------------------------------------------------------------------------")