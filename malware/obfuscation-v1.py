#!/usr/bin/env python3

import sys
import time
import base64
import gzip
import socket
import os
import secrets
from io import BytesIO
from pathlib import Path
from get_hash import get_sha256
from write_file import write_to_file
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

# === suspicious API calls (benign, not executed) =================================================
SUSPICIOUS_API_CALLS = [
    "VirtualAlloc", "WriteProcessMemory", "CreateRemoteThread", "SetWindowsHookEx",
    "FindWindow", "GetProcAddress", "LoadLibrary", "RegSetValueEx", "ShellExecute",
    "VirtualAllocEx", "CreateRemoteThread", "WriteProcessMemory",
    "WinExec", "NtQueryInformationProcess", "AdjustTokenPrivileges",
    "LoadLibraryA", "GetProcAddress", "CryptGenRandom",
    "InternetOpenA", "HttpSendRequestA", "ZwCreateSection"
]

# === suspicious C2 domains (benign, not executed) ================================================
C2_DOMAINS = [
    "malware-c2.com", "evil-server.net", "badactor.org", "malicious-host.info",
    "malware-command-control.example", "update-service.badexample.org",
    "dropper.test-domain.invalid", "c2.beacon.invalid"
]

# == suspicious C2 IPs (benign, not executed) =====================================================
C2_IPS = [
    "203.0.113.42", "198.51.100.23", "192.0.2.55"
]

# === EICAR test string (standard antivirus test) =================================================
EICAR_PLAIN = r'X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'
EICAR_BASE64 = "WDVPKVAlQVBbNFxQWlg1NChQXikyQ0MpN30kRUlDQVItU1RBTkRBUkQtQU5USVZJUlVTLVRFU1QtRklMRSFkSCtIKg=="

eicar_bytes = EICAR_PLAIN.encode()
eicar_gzipped = BytesIO()
with gzip.GzipFile(fileobj=eicar_gzipped, mode='wb') as gz:
    gz.write(eicar_bytes)
EICAR_GZ = base64.b64encode(eicar_gzipped.getvalue()).decode()

# === fake shellcode patterns (hex bytes that look suspicious) ====================================
SHELLCODE = bytes([0x90, 0x90, 0x90, 0x90, 0x31, 0xc0, 0x50, 0x68])  # NOP sled + common opcodes

# === suspicious powershell command ===============================================================
POWERSHELL = "powershell -enc"

# === base64 markers ==============================================================================
BASE64_MARKER = "AAAAAAA=="

# === suspicious executables ======================================================================
SUSPICIOUS_FILENAMES = [
    "svchost.exe", "taskhostw.exe", "rundll32.exe", "explorer.exe"
]

# === registry keys ===============================================================================
AUTORUN_REG_KEYS = [
    r"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
    r"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
    r"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell"  # Added: common persistence
]

# === mutes names =================================================================================
MUTEX_NAMES = [
    "Global\\SOME_SUSPICIOUS_MUTEX", "Local\\RANSOM_LOCK", "WinRing0_1_2_0"
]

# === packer indicators ===========================================================================
UPX_MARKERS = [
    "UPX!", ".UPX0", ".UPX1"
]

OTHER_PACKERS = [
    "ASPack", "FSG!", "PEtite", "Themida", "VMProtect"
]

# === ransom note =================================================================================
FAKE_RANSOM_NOTE = """
    *** BENIGN TEST NOTE ***
    Your files hase been encrypted!
    Send 1000 Bitcoins to the following address: 1FakeRansomAddrNoValidChecksum123456789 
    Send confirmation to evil@hacker.com""" 

# === high enropy blob ============================================================================
HIGH_ENTROPY_BLOB = (
    "IF9kYXRhX2ZpbGxlcl9iZW5pZ25f" * 500  # Increased: repeated base64-ish junk to raise entropy scores
)

# === pdb/build path (string only) ================================================================
PDB_PATH = r"C:\\builds\\malware-lab\\payload\\release\\payload.pdb"
OTHER_PDB = r"D:\\Projects\\RAT\\Debug\\rat.pdb"

# === family name tokens used by generic rules (string only) ======================================
FAMILY_MARKERS = [
    "wannacry", "emotet", "trickbot", "qakbot", "agenttesla", "remcos", "nanocore", "lokibot"
]

# === crypto functions ============================================================================
def xor_encrypt(data, key):
    """ simple XOR encryption """
    result = []
    for i, byte in enumerate(data):
        result.append(byte ^ key[i % len(key)])
    return bytes(result)

def encrypt(data: str = b"this is secret data", password : str = b"this is my secret key"):
    encrypted = xor_encrypt(data, password)
    print(f"Encrypted your directory and all our files, email hacker@evil-corp.com for ransom: {encrypted.hex()}")
    return encrypted

def aes256_encrypt(input_file, output_file, password):
    """ encrypt a file using AES-256 """
    salt = os.urandom(16)
    key = PBKDF2HMAC(
        algorithm=hashes.SHA256(), length=32, salt=salt, iterations=100000
    ).derive(password.encode())
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
    encryptor = cipher.encryptor()
    with open(input_file, 'rb') as infile, open(output_file, 'wb') as outfile:
        outfile.write(salt + iv)
        data = infile.read()
        pad_len = 16 - (len(data) % 16)
        data += bytes([pad_len] * pad_len)
        outfile.write(encryptor.update(data) + encryptor.finalize())
    print(f"File encrypted: {input_file} -> {output_file}")
    return True

# === virtual machine checks ======================================================================
def check_vm_artifacts():
    """ check for virtualization artifacts """
    vm_indicators = [
        "VMware", "VirtualBox", "VBOX", "QEMU", "Xen", 
        "Hyper-V", "Parallels", "Virtual Machine"
    ]
    for indicator in vm_indicators:
        if indicator.lower() in str(sys.platform).lower():
            print(f"[VM Detection] Found: {indicator}")
            return True
        
    return False

# === network beacon simulator ====================================================================
def network_beacon():
    """ simulate network beacon behavior """
    try:
        # Simulate C2 communication attempt
        for domain in C2_DOMAINS[:2]:
            try:
                socket.gethostbyname(domain)  # DNS lookup
                print(f"[Network] Beacon to {domain}")
            except:
                pass
    except:
        pass

# =================================================================================================
def main():
    print("----------------------------- Obfuscation Test Sample -----------------------------\n")
    print("[-] Base Implementation -----------------------------------------------------------\n")
    
    hash = get_sha256(sys.executable)
    encrypt()
    vm_detected = check_vm_artifacts()
    
    file_name = "obfuscation-v1.bin"
    for index in range(10):
        time.sleep(0.100)
        
        if index == 5:
            write_to_file(file_name, hash)
            
            write_to_file(file_name, EICAR_PLAIN)
            write_to_file(file_name, EICAR_GZ)
            write_to_file(file_name, SHELLCODE)
            
            crypto_data = f"Key: {secrets.token_hex(16)}\n"
            crypto_data += f"IV: {secrets.token_hex(8)}\n"
            write_to_file(file_name, crypto_data)
            
            network_beacon()
            
        suspicious_call = f"Calling {SUSPICIOUS_API_CALLS[index % len(SUSPICIOUS_API_CALLS)]}"
        print(f"[{index}] {suspicious_call}")

if __name__ == "__main__":
    main()
    
# pyinstaller .\malware\obfuscation-v1.py --onefile --distpath .\dist\rq1\