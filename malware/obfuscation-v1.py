#!/usr/bin/env python3

import sys
import time
import base64
import gzip
import socket
import os
import secrets
from io import BytesIO
from pathlib import Path
from get_hash import get_sha256
from write_file import write_to_file

def simple_encrypt(data, key):
    """Simple XOR encryption"""
    result = []
    for i, byte in enumerate(data):
        result.append(byte ^ key[i % len(key)])
    return bytes(result)

def demo_crypto():
    """Simple crypto demo"""
    key = b"secretkey123"
    data = b"This is secret data"
    encrypted = simple_encrypt(data, key)
    print(f"Encrypted: {encrypted.hex()}")
    return encrypted

def encrypt_file_aes256(input_file, output_file, password):
    """Encrypt a file using AES-256"""
    from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
    from cryptography.hazmat.primitives import hashes
    from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
    import os
    
    # Generate salt and derive key
    salt = os.urandom(16)
    kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=salt, iterations=100000)
    key = kdf.derive(password.encode())
    
    # Generate IV
    iv = os.urandom(16)
    
    # Create cipher
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
    encryptor = cipher.encryptor()
    
    # Read and encrypt file
    with open(input_file, 'rb') as infile, open(output_file, 'wb') as outfile:
        # Write salt and IV first
        outfile.write(salt + iv)
        
        # Encrypt file in chunks
        while True:
            chunk = infile.read(8192)
            if not chunk:
                break
            
            # Pad last chunk if needed
            if len(chunk) % 16 != 0:
                padding = 16 - (len(chunk) % 16)
                chunk += bytes([padding] * padding)
            
            encrypted_chunk = encryptor.update(chunk)
            outfile.write(encrypted_chunk)
        
        outfile.write(encryptor.finalize())
    
    print(f"File encrypted: {input_file} -> {output_file}")
    return True

# Typical suspicious strings and patterns that YARA rules detect
SUS_APIS = [
    "VirtualAlloc", "WriteProcessMemory", "CreateRemoteThread", "SetWindowsHookEx",
    "FindWindow", "GetProcAddress", "LoadLibrary", "RegSetValueEx", "ShellExecute"
]

C2_DOMAINS = [
    "malware-c2.com", "evil-server.net", "badactor.org", "malicious-host.info"
]

# EICAR test string (standard antivirus test)
EICAR_PLAIN = r'X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'

# Create gzipped version for evasion testing
eicar_bytes = EICAR_PLAIN.encode()
eicar_gzipped = BytesIO()
with gzip.GzipFile(fileobj=eicar_gzipped, mode='wb') as gz:
    gz.write(eicar_bytes)
EICAR_GZ = base64.b64encode(eicar_gzipped.getvalue()).decode()

# Fake shellcode patterns (hex bytes that look suspicious)
FAKE_SHELLCODE = bytes([0x90, 0x90, 0x90, 0x90, 0x31, 0xc0, 0x50, 0x68])  # NOP sled + common opcodes

def check_vm_artifacts():
    """Check for virtualization artifacts"""
    vm_indicators = [
        "VMware", "VirtualBox", "VBOX", "QEMU", "Xen", 
        "Hyper-V", "Parallels", "Virtual Machine"
    ]
    
    for indicator in vm_indicators:
        if indicator.lower() in str(sys.platform).lower():
            print(f"[VM Detection] Found: {indicator}")
            return True
    return False

def network_beacon():
    """Simulate network beacon behavior"""
    try:
        # Simulate C2 communication attempt
        for domain in C2_DOMAINS[:2]:
            try:
                socket.gethostbyname(domain)  # DNS lookup
                print(f"[Network] Beacon to {domain}")
            except:
                pass
    except:
        pass

def main():
    """Main execution function"""
    print("=== Enhanced Malware Analysis Sample ===")
    print("This file contains patterns designed to trigger YARA rules and security analysis.\n")
    
    # Basic system info
    print(f"Python: {sys.version}")
    print(f"Platform: {sys.platform}")
    print(f"Executable: {sys.executable}")
    
    # Get hash of current executable
    print("----------------------------- Obfuscation Test Sample -----------------------------\n")
    print("[-] Base Implementation -----------------------------------------------------------\n")
    
    EICAR_BASE64 = "WDVPKVAlQVBbNFxQWlg1NChQXikyQ0MpN30kRUlDQVItU1RBTkRBUkQtQU5USVZJUlVTLVRFU1QtRklMRSFkSCtIKg=="

    C2_DOMAINS = [
        "malware-command-control.example",      # clearly fake TLD
        "update-service.badexample.org",
        "dropper.test-domain.invalid",
        "c2.beacon.invalid",  # Added: common in beacon rules
    ]

    C2_IPS = ["203.0.113.42", "198.51.100.23", "192.0.2.55"]  # RFC 5737 test ranges
    
    SUS_APIS = [
        "VirtualAllocEx", "CreateRemoteThread", "WriteProcessMemory",
        "WinExec", "NtQueryInformationProcess", "AdjustTokenPrivileges",
        "LoadLibraryA", "GetProcAddress", "CryptGenRandom",
        "InternetOpenA", "HttpSendRequestA", "ZwCreateSection"  # Added: common injection APIs
    ]
    
    # --- “Tells” often used in rulesets -----------------------------------------
    POWERSHELL_ENC = "powershell -enc"
    
    BASE64_MARKER = "AAAAAAA=="  # harmless filler
    
    SUSPICIOUS_FILENAMES = ["svchost.exe", "taskhostw.exe", "rundll32.exe", "explorer.exe"]
    
    AUTORUN_REG_KEYS = [
        r"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
        r"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
        r"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell"  # Added: common persistence
    ]

    MUTEX_NAMES = ["Global\\SOME_SUSPICIOUS_MUTEX", "Local\\RANSOM_LOCK", "WinRing0_1_2_0"]

    # --- Packer fingerprints (strings only; not actually packed here) -----------
    UPX_MARKERS = ["UPX!", ".UPX0", ".UPX1"]  # many signatures/YARA look for these strings
    OTHER_PACKERS = ["ASPack", "FSG!", "PEtite", "Themida", "VMProtect"]  # Added: more packer strings for YARA hits

    # --- Ransom-note-like text (string only, clearly labelled as fake) ----------
    FAKE_RANSOM_NOTE = """
        *** BENIGN TEST NOTE ***
        Your files hase been encrypted!
        Send 1000 Bitcoins to the following address: 1FakeRansomAddrNoValidChecksum123456789 
        Send confirmation to evil@hacker.com""" 

    # --- High-entropy filler (harmless) -----------------------------------------
    HIGH_ENTROPY_BLOB = (
        "IF9kYXRhX2ZpbGxlcl9iZW5pZ25f" * 500  # Increased: repeated base64-ish junk to raise entropy scores
    )

    # --- PDB/Build path tell (string only) --------------------------------------
    PDB_PATH = r"C:\\builds\\malware-lab\\payload\\release\\payload.pdb"
    OTHER_PDB = r"D:\\Projects\\RAT\\Debug\\rat.pdb"  # Added: suspicious build path

    # --- “Family name” tokens used by generic rules (string only) ---------------
    FAMILY_MARKERS = ["wannacry", "emotet", "trickbot", "qakbot", "agenttesla", "remcos", "nanocore", "lokibot"]

    # --- Benign "shellcode-like" hex (random, non-executable) -------------------
    FAKE_SHELLCODE = b'\x90\x90\x90\xEB\xFE' * 100  # NOP sled loop; harmless but looks suspicious

    hash = get_sha256(sys.executable)
    print(f"SHA-256: {hash}\n")
    
    # Demo crypto patterns
    print("=== CRYPTO DEMO ===")
    demo_crypto()
    print()
    
    # VM detection
    print("=== VM DETECTION ===")
    vm_detected = check_vm_artifacts()
    print()
    
    # Main execution loop
    for index in range(10):
        time.sleep(0.100)
        
        if index == 5:
            write_to_file(hash)
            
            # Write EICAR and suspicious content
            eicar = EICAR_PLAIN
            print(f"EICAR: {eicar}\n")
            write_to_file(eicar)
            write_to_file(EICAR_GZ)
            write_to_file(FAKE_SHELLCODE)
            
            # Write crypto patterns
            crypto_data = f"Key: {secrets.token_hex(16)}\n"
            crypto_data += f"IV: {secrets.token_hex(8)}\n"
            write_to_file(crypto_data)
            
            # Network activity
            network_beacon()
            
        # Suspicious API references
        suspicious_call = f"Calling {SUS_APIS[index % len(SUS_APIS)]}"
        print(f"[{index}] {suspicious_call}")
        
    print("\n=== Analysis Complete ===")
    print("This sample demonstrates various suspicious patterns that security tools detect:")
    print("- EICAR test strings")
    print("- Suspicious API references") 
    print("- Cryptographic patterns")
    print("- Network beaconing behavior")
    print("- VM detection attempts")
    print("- File manipulation")

if __name__ == "__main__":
    main()