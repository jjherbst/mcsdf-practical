import base64
import sys
import os
import platform
import ctypes
import hashlib
import psutil
import time
from write_file import write_to_file

def check_vbox_processes():
    vbox_processes = ['vboxservice.exe', 'vboxtray.exe']
    for proc in psutil.process_iter(['name']):
        name = (proc.info.get('name') or '').lower()
        if name in vbox_processes:
            print(f"Detected VirtualBox process: {proc.info['name']}")
            return True
    return False

def check_vbox_files():
    vbox_files = [
        'C:\\windows\\System32\\Drivers\\VBoxMouse.sys',
        'C:\\windows\\System32\\Drivers\\VBoxGuest.sys',
        'C:\\windows\\System32\\Drivers\\VBoxSF.sys',
        'C:\\windows\\System32\\VBoxService.exe',
        'C:\\windows\\System32\\VBoxTray.exe',
        'C:\\Program Files\\Oracle\\VirtualBox Guest Additions\\VBoxControl.exe'
    ]
    for file_path in vbox_files:
        if os.path.exists(file_path):
            print(f"Detected VirtualBox file: {file_path}")
            return True
    return False

def check_vbox_mac():
    try:
        mac = psutil.net_if_addrs()['Ethernet'][0].address
        if mac[:8].lower() == '08:00:27':
            print(f"Detected VirtualBox MAC OUI: {mac[:8]}")
            return True
    except Exception:
        pass
    return False

def check_vbox_registry():
    if platform.system() != 'Windows':
        return False
    try:
        import winreg
        keys = [
            (winreg.HKEY_LOCAL_MACHINE, r"HARDWARE\DESCRIPTION\System", "SystemBiosVersion"),
            (winreg.HKEY_LOCAL_MACHINE, r"HARDWARE\DESCRIPTION\System", "VideoBiosVersion")
        ]
        indicators = ['vbox', 'virtualbox', 'oracle', 'innotek']
        for hkey, path, value in keys:
            try:
                with winreg.OpenKey(hkey, path) as key:
                    val, _ = winreg.QueryValueEx(key, value)
                    if any(i in str(val).lower() for i in indicators):
                        print(f"Detected VirtualBox registry indicator: {val}")
                        return True
            except FileNotFoundError:
                continue
    except Exception:
        return False
    return False

def is_virtualized():
    return any([
        check_vbox_processes(),
        check_vbox_files(),
        check_vbox_mac(),
        check_vbox_registry()
    ])

def print_hash():
    target = sys.executable if getattr(sys, 'frozen', False) else os.path.abspath(__file__)
    hasher = hashlib.sha256()
    with open(target, 'rb') as f:
        for chunk in iter(lambda: f.read(8192), b''):
            hasher.update(chunk)
    digest = hasher.hexdigest()
    print(f"[hash] SHA256 {digest} (file={os.path.basename(target)})")
    return digest

def drop_benign_payload():
    write_to_file("malware.exe",  base64.b64decode(b'WDVPKVAlQVBbNFxQWlg1NChQXikyQ0MpN30kRUlDQVItU1RBTkRBUkQtQU5USVZJUlVTLVRFU1QtRklMRSFkSCtIKg==').decode())

if __name__ == "__main__":
    print("---------------- Sandbox Detection Loop Started ----------------")
    print_hash()

    try:
        while True:
            if is_virtualized():
                print("Oracle VirtualBox environment detected! Exiting to evade analysis.")
                break
            else:
                print("No Oracle VirtualBox detected.")
                print("Dropping benign malware.exe payload.")
                drop_benign_payload()
                break
    except KeyboardInterrupt:
        print("\nDetection loop interrupted by user")
    finally:
        print("---------------- Sandbox Detection Loop Finished ---------------")