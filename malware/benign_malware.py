#!/usr/bin/env python3
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend
import os
from pathlib import Path

# ------------------------------------------ YARA Triggers ------------------------------------------
# suspicious URLs (not executed)
MALICIOUS_URLS = {
    "c2": "https://malware-command-control.com/download",   
    "hacking-tools": "http://evil-site.net/payload",        
}

# suspicious IPs (not executed)
C2_IPS = {
    "c2-ip": "192.168.1.100", 
    "hacker-forum": "10.0.0.5",
    "external_tools": "203.0.113.42",
}

# suspicious method names as strings (not executed)
SUSPICIOUS_PY_CALLS = {
    "eval": "eval(",
    "exec": "exec(",
    "import_dynamic": "__import__(",
    "compile_code": "compile(",
    "subprocess_popen": "subprocess.Popen(",
    "subprocess_run": "subprocess.run(",
    "os_system": "os.system("
}

# suspicious windows API method names names (not executed)
WIN_API_CALLS = {
    "open_process": "OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);",
    "virtual_alloc": "VirtualAllocEx(hProcess, NULL, dwSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);",
    "write_process_memory": "WriteProcessMemory(hProcess, pRemoteCode, payload, dwSize, NULL);",
    "create_remote_thread": "CreateRemoteThread(hProcess, NULL, 0, pRemoteCode, NULL, 0, NULL);",
}

# EICAR test signatures, used to trigger AV scanners.
EICAR_SIGNATURES = {
    "eicar": "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"
}

# ----------------------------------------- Do Benign Stuff -----------------------------------------
def main() -> None:
    # filename of benign malware
    malware_path = Path("./output/malware.bin")
    
    # triggers AV scanners with malware bin file (eicar string)
    drop_payload(malware_path)

    # aes 256 encrypt the malware bin file (eicar string)
    encrypt_file_aes256(malware_path, b"0123456789abcdef0123456789abcdef")
    
    # create a ransom note - with the encryption key present
    create_ransom_note(malware_path.parent)

def create_ransom_note(directory: Path, key: bytes) -> None:
    note = (
        "Your files have been encrypted!\n"
        "To recover your data, send 1 Bitcoin to the following address: 1ABC23DEF45GHI67JKL89MN0PQR12STU34\n"
        "Contact us at evil@malware.com for further instructions.\n"
    )
    note_path = directory
    with open(note_path, "w", encoding="utf-8") as f:
        f.write(note)

def drop_payload(filename: str | Path) -> None:
    with open(filename, "wb") as file:
        file.write(EICAR_SIGNATURES["eicar"].encode("utf-8", errors="ignore"))
        
def encrypt_file_aes256(file_path, key):
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    padder = padding.PKCS7(128).padder()
    data = Path(file_path).read_bytes()
    padded = padder.update(data) + padder.finalize()
    ct = encryptor.update(padded) + encryptor.finalize()
    with open(file_path, "wb") as f:
        f.write(iv + ct)

if __name__ == "__main__":
    main()
